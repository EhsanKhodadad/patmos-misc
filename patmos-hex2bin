#!/usr/bin/php
<?
// 
// This script reads the hexadecimal instruction encoding in Patmos .s files
// generated by patmos-clang or llc -show-mc-encoding, and adds them in
// binary encoding to the comments.
//
// Author: Stefan Hepp <hepp@complang.tuwien.ac.at>
// 
// The thing is, I am simply too lazy to do it in awk/perl/shell/... now.

function usage() {
    echo "Usage: ".$argv[0]." [-b|-f] [-o <outfile.s>|-i] <file.s>\n";
    echo "  -b  Produce binary file containing all instructions (use with -o)\n";
    echo "  -f  Group binary representation per byte, not per field\n";
    echo "  -i  Perform replacement in place on the input file.\n";
    echo "  -o  Write output to file (otherwise to stdout).\n";
}

if (count($argv) < 2) {
    usage();
    exit(1);
}

$infile = "";
$outfile = "";
$format = true;
$binout = false;
$inplace = false;

for ($i = 1; $i < count($argv); $i++) {
    $arg = $argv[$i];

    switch ($arg) {
	case "-b": $binout = true; break;
	case "-f": $format = false; break;
	case "-i": $inplace = true; break;
	case "-h": case "--help": usage(); exit(0);
	case "-o": $outfile = $argv[++$i]; break;
	default:
	    $infile = $arg;
    }
}

if (!file_exists($infile)) {
    echo "Input file does not exist: ".$argv[1]."\n";
    exit(1);
}
if ($inplace) {
    if ($outfile) {
	echo "Error: -i not allowed with -o\n";
	exit(1);
    }
    $outfile = $infile;
}
if ($binout) {
    if ($inplace || $infile == $outfile) {
	echo "You probably do not want to replace your .s file with the binary, cowardly backing out.\n";
	exit(2);
    }
    if (!$outfile) {
	echo "Error: -b must be used with -o\n";
	exit(1);
    }
}

$lines = file($infile);
$data = array();

foreach ($lines as $line) {
    $rs = array();
    if ( preg_match('/# encoding: \[( ?([0-9a-fx,A]*) *(\| [01x ]*)?)\]/', $line, &$rs) ) {
	$hex = $rs[2];
	$vals = explode(",", $hex);
	
	$bin = "";
	$pad = "";
	foreach ($vals as $val) {
	    if ($val == "A") {
		$bin .= $binout ? "00" : "xxxxxxxx";
		$pad .= "   ";
		continue;
	    }
	    $tmp = substr($val, 2, 2);
	    if ($binout) {
		$bin .= $tmp;
	    } else {
		$bin .= str_pad(base_convert($tmp, 16, 2), 8, '0', STR_PAD_LEFT).($format?"":" ");
	    }
	}

	if ($binout) {
	    $data[] = pack('H*', $bin);
	} else {
	    if ($format) {
		$bin = substr($bin,0,1)." ".substr($bin,1,4)." ".substr($bin,5,5)." ".
		       substr($bin,10,5)." ".substr($bin,15,5)." ".substr($bin,20,5)." ".substr($bin,25,7)." ".substr($bin,32) . (strlen($bin)<33?"":" ");
	    }

	    $data[] = str_replace($rs[1], " $hex $pad| $bin", $line);
	}

    } elseif (!$binout) {
	$data[] = $line;
    }
}

if (!$outfile) {
    echo implode("",$data);
} else {
    file_put_contents($outfile, $data);
}

?>
