===---------------------------------------------------------------------===
 Patmos Backend.
===---------------------------------------------------------------------===

This file contains documentation about the LLVM Patmos backend:

- ELF File Format
- LLVM Backend Internals
- Assember Syntax
- Address Spaces


ELF File Format
---------------

o) ELF Identification
e_machine: EM_PATMOS = 0xBEEB 

o) ELF Relocation infos
Name			Value	Description
R_PATMOS_NONE		0
R_PATMOS_CFLB_ABS	1	CFLb format (22 bit immediate), absolute (unsigned), in words
R_PATMOS_CFLB_PCREL	2	CFLb format (22 bit immediate), PC relative (signed), in words
R_PATMOS_ALUI_ABS       3	ALIi format (12 bit immediate), absolute (unsigned), in bytes
R_PATMOS_ALUI_PCREL	4	ALUi format (12 bit immediate), PC relative (signed), in bytes
R_PATMOS_ALUL_ABS	5	ALUl format (32 bti immediate), absolute (unsigned), in bytes
R_PATMOS_ALUL_PCREL	6	ALUl format (32 bit immediate), PC relative (signed), in bytes
R_PATMOS_MEMB_ABS	7	LDT or STT format (7 bit immediate), signed, in bytes
R_PATMOS_MEMH_ABS	8	LDT or STT format (7 bit immediate), signed, in half-words
R_PATMOS_MEMW_ABS	9	LDT or STT format (7 bit immediate), signed, in words
R_PATMOS_ABS_32		10	32 bit word, absolute (unsigned), in bytes
R_PATMOS_PCREL_32	11	32 bit word, PC relative (signed), in bytes

o) Subfunctions, symbols
- ELF Symbol flag: 
    - MCSA_ELF_TypeCode / STT_CODE (value 13): set for symbols which point to the beginning of a (sub) function
      (i.e., the first instruction after the alignment and function size word)
- Function symbol points to first instruction of function, has .type function, .size is whole function size
- Code symbol points to first instruction of subfunction, has .type code, .size is size of subfunction
- First subfunction has only function symbol, following subfunctions have code symbol (i.e.,
  the size value for the first subfunction in the symbol is not the same as the actual size)

LLVM backend fixups, symbols, immediates
----------------------------------------
At MC level, immediates are always in byte/half-word/word as the instruction where they are used,
i.e., immediates are already properly shifted. 

The assembler parser and assembler printer (i.e., the disassember and .s emitter) parse and print 
immedates without conversion, i.e., immediates are printed in words/half-words/bytes, depending on
the instruction. If the flag --TODO is used, all immediates are parsed / printed as bytes.


Assembler Syntax
----------------

o) General Instruction Syntax

Each operation is predicated, the predicate register is specified before the operation in
parentheses, e.g. (p1) <instruction>.  If the predicate register is prefixed by a !, it is negated.
If omitted, the predicate defaults (p0), i.e.\ always true.

All register names must be prefixed by $. The instructions use destination before source in the
instructions. Between destination and source a = character must be used instead of a comma.

Immediate values are not prefixed for decimal notation, the usual 0 and 0x formats are accepted for
octal and hexadecimal immediates.  Comments start with the hash symbol # and are considered to the
end of the line. 

For memory operations, the syntax is [$register + offset]. Register or offset can be ommited, in
that case the zero register r0 or an offset of 0 is used.

Labels that are prefixed by .L are local labels. Labels may only appear between bundles, not inside bundles. 

-- Example --
    # add 42 to contents of r2
    # and store result in r1 (first slot)
    { add   $r1 = $r2, $42
    # if r3 equals 50, set p1 to true
    cmpeq $p1, $r3, 50 }
    # if p1 is true, jump to label_1
    ($p1) br .Llabel1 ; nop ; nop   # then wait 2 cycles
    # Load the address of a symbol into r2
    li $r2 = .L.str2
    # perform a memory store and a pred op
    { swc [$r31 + 2] = $r3 ; or $p1 = !$p2, $p3 }
    ...
.Llabel1:
    ...
-- End --


o) Bundles 

A semi-colon ; or a newline denotes the end of an instruction or operation. If an instruction contains
two operations, the operations in the bundle must be enclosed by curly brackets. For bundles consisting
only of one operation, the brackets are optional. 

Known bugs: 

The closing bracket must appear on the same line as the last operation in the bundle. The opening bracket might
be followed by a newline, but no comments or labels may appear between the bracket and the first operation.


o) Function Block Start Markers and Subfunction Calls

Functions must be prepended by the .fstart directive which emits the function size word and aligns the 
code. 

    .fstart <label>, <size-in-bytes>, <alignment-in-bytes>

The alignment must be a power of 2. The function size must be the size of the following (sub-)function.
If a function is split into several subfunctions, the size must be the size of the first sub-function, 
not the size of the whole function (this differs from the .size directive).


    .type   foo,@function
    .size   foo, .Ltmp2-foo	    # size of foo symbol is the whole function 
    .fstart foo, .Ltmp0-foo, 4
foo:				    # start of foo function
    sres  10
    ...
    brcf .Ltmp1			    # Fallthrough to different subfunction is not allowed
    nop
    nop
.Ltmp0:				    # end of first subfunction of foo 

    .type   .Ltmp1,@code
    .size   .Ltmp1, .Ltmp2-.Ltmp1
    .fstart .Ltmp1, .Ltmp2-.Ltmp1, 4
.Ltmp1:				    # start of second subfunction of foo
    ...
    ret $r30, $r31		    # returns from foo, not from the subfunction
    nop
    nop
.Ltmp2:				    # end of (second subfunction of) foo


To set the address of a function relative to the start of the section, use the .org directive before
the .fstart directive and allow for the function size word so that .fstart does not emit any padding.

    .org <aligned startaddress>-4
    .fstart .foo, .Ltmp0-.foo, <alignment>
foo:
    ....



Address Spaces
--------------
Set address space of a pointer by using __attribute__((address_space(<nr>))). See patmos.h in newlib.

Used address spaces:
- Address Space 0 (default): main memory with data cache
    - nontemporal flag: main memory with bypass
      Set only by the compiler (at the moment)
- Address Space 1: (local) scratchpad memory
    - use macro _SPM defined in <machine/spm.h> for SPM accesses
    - use macro _IODEV defined in <machine/patmos.h> to access memory mapped IO devices
- Address Space 2: Stack cache
    - Compiler-maintained, must not be used in application code (at the moment)
- Address Space 3: main memory without data cache
    - use macro _UNCACHED defined in <machine/patmos.h>

