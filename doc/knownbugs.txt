Known Bugs and Common Problems
==============================


o) Undefined reference to <libc function>: Some LLVM passes might create calls to standard library functions
after the bitcode linking phase. We added all such functions that we found to libcsyms.ll.in in compiler-rt. 
If we missed some functions, they must be added. Alternatively, newlib and compiler-rt could be compiled as ELF libraries.

However, in rare cases llvm-link does not link in a required function, although it is available in the archive.
No idea why or when this happens. 

It could also be the case that newlib needs to be recompiled, or that your linking order is wrong (be aware
that mixing bitcode or C files, assembly files and ELF files causes the linking order to be changed).



o) Inline assembler: Clobbering the registers $r30/$r31 is not supported and calls inside 
inline assembler will not cause the prologue to save $r30/$31. Do not modify them in inline assembly.



o) Inline assembler: Constraining an output to a register ("={$r10}") does not work, for some reason 
LLVM looses the output register operand somewhere between SelectionDAGBuilder::visitInlineAsm() and 
AsmPrinter::EmitInlineAsm().



o) patmos-{objdump,objcopy,..} does not support Patmos ELF files: Only patmos-ld supports the Patmos
ELF file type. patmos-ar and patmos-nm have some support for bitcode archives (when the LLVMgold plugin is
compiled, default for build.sh builds). Other binutils tools have no support for Patmos ELFs. 
Use patmos-llvm-objdump and patmos-ld instead.



o) Compiling patmos-gold with GCC 4.7.0 aborts with an error about narrowing conversion

Workaround: use CXXFLAGS=-Wno-narrowing for configure, upgrade to a newer GCC version or 
use clang to compile the toolchain. 

If you are using the build.sh script, set GOLD_CXXFLAGS="-Wno-narrowing" in build.cfg.



o) Keeping relocations in the executable (-Xgold -q) and debugging info (-g) do not work together.

This seems to be a gold restriction.


