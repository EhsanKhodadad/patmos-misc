# -*- python -*-
# ex: set syntax=python:

# Benedikt Huber <benedikt@vmars.tuwien.ac.at>

# This is the patmos buildmaster config file.

# TODO:
# (1) Passing 'workdir' to almost every builder utility functions seems ugly and is hard to maintain - improve!
# (2) Instead of installing on the slave (only works locally), use the UploadFile and DownloadFile commands
# DONE:
# (/) Create one builder for the complete patmos toolchain (to avoid having NxM builders for N architectures and M tools)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

import ConfigParser

configfile = "server.db"

config = ConfigParser.ConfigParser()
config.read(configfile)

def get_option(config, section, key, default):
   if config.has_option(section, key):
      return config.get(section, key)
   else:
      return default

c['slaves'] = [ BuildSlave(name, passwd) for name, passwd in config.items('slaves') ]

slaves_main    = [ name for name,ignored in config.items('slaves-main') ]
slaves_synth   = [ name for name,ignored in config.items('slaves-synth') ]
slaves_arch    = { 'linux-i686' : [ name for name,ignored in config.items('slaves-i686') ],
                   'linux-x64'  : [ name for name,ignored in config.items('slaves-x64') ] }

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = config.getint('ports','slave-port')

####### CHANGESOURCES

repos = { 'llvm'  : get_option(config,'repositories','llvm','https://github.com/t-crest/patmos-llvm.git'),
          'clang' : get_option(config,'repositories','clang','https://github.com/t-crest/patmos-clang.git'),
          'crt'   : get_option(config,'repositories','crt','https://github.com/t-crest/patmos-compiler-rt.git'),
          'newlib': get_option(config,'repositories','newlib','https://github.com/t-crest/patmos-newlib.git'),
          'gold'  : get_option(config,'repositories','gold','https://github.com/t-crest/patmos-gold.git'),
          'patmos': get_option(config,'repositories','patmos','https://github.com/t-crest/patmos.git'),
          'bench' : get_option(config,'repositories','benchmarks','http://github.com/t-crest/patmos-benchmarks.git') }

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. We watch all github repos from the patmos
# project

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
for name,repo in repos.items():
   c['change_source'].append(GitPoller(
         repo, workdir = 'gitpoller-workdir/'+name, branch = 'master',
         project = name, pollinterval = 15*60))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.steps.slave import MakeDirectory
from buildbot.steps.transfer import DirectoryUpload, FileUpload

def do_fetch_repo(self, selected_repo):
   repo = self.getProperty('fetchRepo')
   if selected_repo and repo:
      return repo == selected_repo
   else:
      return True

def is_full_build(self):
    return bool(self.getProperty('fullBuild'))

def is_clean_install_dir(self):
    return bool(self.getProperty('cleanInstallDir'))


import os.path
def get_install_dir(workdir, shellAbsPath = False):
   "Get install prefix (SLAVE_ROOT/install), given the current slave workdir (relative to SLAVE_ROOT/<builder>)"
   if os.path.isabs(workdir):
       raise ValueError("get_install_dir: expecting relative workdir path")
   rootdir, reldir = '..', workdir
   while reldir:
       (reldir,head) = os.path.split(reldir)
       if not head or head == '.':
           continue
       if head == '..':
           raise ValueError("get_install_dir: workdir must not contain ..")
       rootdir = os.path.join(rootdir, '..')
   if shellAbsPath:
       rootdir = "$(python -c 'import os; print(os.path.abspath(\"%s\"))')" % (rootdir)
   return os.path.join(rootdir,'install')

#
# Steps for our builds
def cmds_git(url, workdir = 'build', mode = 'update', name = '', cleanRepoCheck = is_full_build):
   "Return command list for cloning and (for full builds) cleaning a repo"
   steps = []
   steps.append (Git(url, description = "update %s" % name, mode = mode, workdir = workdir, doStepIf = lambda s : do_fetch_repo(s,name)))
   if cleanRepoCheck:
      steps.append (ShellCommand(name = "clean-repo", command = "git clean -dfx", workdir = workdir, doStepIf = cleanRepoCheck))
   return steps

def cmds_cmake(workdir = "build", cmakeopts = "", name = "cmake", timeout = 1800, install=True, test=False):
   "Return command list for building with cmake"
   steps = []
   builddir = workdir+"/build"
   steps.extend ([ Configure(name = "%s-configure" % name,
                             command = "cmake .. -DCMAKE_PROGRAM_PATH=%s/bin -DCMAKE_INSTALL_PREFIX=%s %s" %
                                       (get_install_dir(builddir,shellAbsPath=True), get_install_dir(builddir), cmakeopts),
                             workdir = builddir),
                   Compile(name = "%s-compile" % name,
                           command = 'make',
                           timeout = timeout,
                           workdir = builddir) ])
   if install: steps.append( Compile(name = "%s-install" % name, command = 'make install', workdir = builddir) )
   if test:    steps.append( Test(name = "%s-test" % name, command = 'make test', workdir = builddir, timeout=timeout) )
   return steps


def cmd_confmake(workdir = "build", configopts = "", buildtarget = "all", installtarget = "install", testtarget="", timeout = 1800):
   "Return command list for building with autotools"
   steps = []
   confcmd = "./configure --prefix=%s %s" % (get_install_dir(workdir, shellAbsPath = True), configopts)
   steps.extend ([ Configure(command = confcmd, workdir = workdir),
                   Compile(command = "make %s" % (buildtarget), workdir = workdir),
                   Compile(name = "install", command = "make %s" % (installtarget), workdir = workdir) ])
   if testtarget:  steps.append( Test(command = "make %s" % testtarget, workdir = workdir) )
   return steps

#
# llvm build factory
def build_llvm(workdir='build'):
   builddir = workdir+"/build"
   steps = []
   steps.append (ShellCommand(name="clean install/", command = "rm -fr %s/*" % (get_install_dir(builddir,shellAbsPath=True)), workdir = workdir, doStepIf = is_clean_install_dir))
   steps.extend (cmds_git(repos['llvm'], workdir = workdir, name='llvm'))
   steps.extend (cmds_git(repos['clang'], workdir = "%s/tools/clang" % workdir, name='clang',cleanRepoCheck = lambda s: False))
   steps.extend (cmds_cmake (workdir = workdir, cmakeopts = "-DBUILD_SHARED_LIBS=ON -DLLVM_TARGETS_TO_BUILD=all", timeout = 7200))
   steps.append( Test(command = 'make check-all', workdir = builddir) ) # FIXME refactor properly
   return steps

#
# compiler-rt build factory
def build_crt(workdir='build'):
   steps = cmds_git(repos['crt'], workdir = workdir)
   cmakeopts = "-DCMAKE_TOOLCHAIN_FILE=../cmake/patmos-clang-toolchain.cmake"
   steps.extend (cmds_cmake (cmakeopts = cmakeopts, workdir = workdir))
   return steps

#
# pasim build factory (workdir = patmos checkout)
def build_pasim(workdir='build'):
   steps = cmds_git(repos['patmos'], workdir = workdir)
   steps.extend (cmds_cmake (name="simulator",workdir = "%s/simulator" % workdir, test=True) )
   steps.extend (cmds_cmake (name="ctools",workdir = "%s/ctools" % workdir) )
   steps.extend ([ Compile(name = "make-emulator", command = "make patsim && make emulator", workdir = workdir),
                   ShellCommand(name="install-emulator", workdir = workdir, command = "cp bin/emulator %s/bin/patmos-emulator" % get_install_dir(workdir, shellAbsPath=True)) ])
   return steps

#
# newlib build factory
def build_newlib(workdir='build'):
   steps = cmds_git(repos['newlib'], workdir = workdir)
   configopts = ("--target=patmos-unknown-unknown-elf "
                 "AR_FOR_TARGET=%(prefix_cmd)s/bin/llvm-ar "
                 "RANLIB_FOR_TARGET=%(prefix_cmd)s/bin/llvm-ranlib "
                 "LD_FOR_TARGET=%(prefix_cmd)s/bin/llvm-ld "
                 "CC_FOR_TARGET=%(prefix_cmd)s/bin/clang "
                 "CFLAGS_FOR_TARGET=\"-target patmos-unknown-unknown-elf -O2\"" % { 'prefix_cmd' : get_install_dir(workdir, shellAbsPath = True) })
   steps.extend (cmd_confmake (configopts = configopts, workdir = workdir) )
   return steps

#
# gold build factory
def build_gold(workdir='build'):
   steps = cmds_git(repos['gold'], workdir = workdir)
   steps.extend (cmd_confmake (configopts = "--program-prefix=patmos- --enable-gold=yes --enable-ld=no",buildtarget = "all-gold",installtarget = "install-gold", workdir = workdir))
   return steps

#
# build_tools factory: llvm, pasim, newlib, crt, gold
def build_tools(workdir='build'):
   "Combined Build Factory for all software tools"
   macrosteps = [ build_llvm(workdir+"/llvm"),
                  build_pasim(workdir+"/patmos"),
                  build_newlib(workdir+"/newlib"),
                  build_crt(workdir+"/crt"),
                  build_gold(workdir+"/gold") ]
   return [ step for steps in macrosteps for step in steps ]


class BenchStats(ShellCommand):
  # TODO: command: invoke stat scripts, csv2html
  #       override createSummary with addHTMLLog
  pass


#
# patmos-benchmarks build factory
def build_bench(workdir='build'):
   steps = cmds_git(repos['bench'])
   opts = "-DCMAKE_TOOLCHAIN_FILE=../cmake/patmos-clang-toolchain.cmake"
   steps.extend (cmds_cmake (cmakeopts = opts, workdir = workdir, install=False, test=True, timeout=3600) )
   return steps

#
# patmos synthesis build factory
def synth_patmos(qproj='altde2-70', workdir='build', app = 'test'):
   steps = cmds_git(repos['patmos'],workdir = workdir)
   steps.append (Compile(name="make-tools",command = "make tools",workdir = workdir))
   steps.append (Compile(name="make-gen",command = "make gen QPROJ=%s" % qproj, workdir = workdir))
   steps.append (Compile(name="make-synth",command = "make synth QPROJ=%s" % qproj,workdir = workdir))
   steps.append (Test(name="make-test", command = 'make test', workdir = workdir))
   steps.append (DirectoryUpload(name="upload-quartus-design",
                                 slavesrc="chisel/quartus/%s" % qproj,
                                 masterdest="public_html/designs/%s" % qproj,
                                 workdir= workdir,
                                 url="patmos-buildbot/designs/%s" % qproj))
   # steps.append (ShellCommand(name="quartus-rbf",
   #                            description="create rbf",
   #                            workdir = "%s/chisel/quartus/%s" % (workdir, qproj),
   #                            command="quartus_cpf -c patmos.sof patmos.rbf"))
   # steps.append (FileUpload(name="upload-quartus-rbf",
   #                          slavesrc="chisel/quartus/%s/patmos.rbf" % qproj,
   #                          workdir=workdir,
   #                          masterdest="public_html/designs/%s/patmos.rbf" % qproj,
   #                          url="patmos-buildbot/designs/%s/patmos.rb" % qproj))
   return steps


# Builders to run for incremental changes
mainbuilders = { "buildllvm"   : build_llvm(),
                 "buildnewlib" : build_newlib(),
                 "buildcrt"    : build_crt(),
                 "buildgold"   : build_gold(),
                 "buildpasim"  : build_pasim(),
                 "buildbench"  : build_bench() }

# Architectures
architectures = [ "linux-i686", "linux-x64" ]

# Builders to test other architectures
archbuilders = { "buildtools" : build_tools() }

# Builders for hardware synthesis
synthbuilders = {  "synthpatmos" : synth_patmos() }

# Builders for hardware tests
hwbuilders = { }

from buildbot.config import BuilderConfig

def builders_add(list, slaves, builders, suffix=""):
   if not slaves:
      return
   for name,steps in builders.items():
      list.append(BuilderConfig(
        name=name+suffix,
        slavenames=slaves,
        env={'LD_LIBRARY_PATH': WithProperties('%s/../install/lib', "workdir") },
        factory=BuildFactory(steps)
        ))

c['builders'] = []
builders_add(c['builders'], slaves_main, mainbuilders, suffix="")
for arch in architectures:
   builders_add(c['builders'], slaves_arch[arch], archbuilders, suffix="_"+arch)
builders_add(c['builders'], slaves_synth, synthbuilders, suffix="")


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# Properties:
#   fullBuild ... clean the build directory before rebuilding

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers import timed
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []

# Incremental build on LLVM/CLANG changes:
# Works in principle, but we must only pull from the repository that changed (as git reset --hard $REV will be executed)
# It would be useful to know, whether the Git step can be configured such that it resets to the changed REV in
# the affected repo, and thus a regular pull in the other
sched_change_llvm = SingleBranchScheduler(name = "llvm_change",
                                     builderNames = ["buildllvm"],
                                     change_filter = filter.ChangeFilter(branch = 'master', project = ['llvm']),
                                     properties = { 'fetchRepo' : 'llvm' },
                                     treeStableTimer = 5*60)
sched_change_clang = SingleBranchScheduler(name = "clang_change",
                                     builderNames = ["buildllvm"],
                                     change_filter = filter.ChangeFilter(branch = 'master', project = ['clang']),
                                     properties = { 'fetchRepo' : 'clang' },
                                     treeStableTimer = 5*60)
c['schedulers'].extend([sched_change_llvm, sched_change_clang])

# Incremental builds for the the system toolchain
for repo in [ "crt", "gold", "newlib", "bench" ]:
   c['schedulers'].append(SingleBranchScheduler(name = repo + "_change",
                                                builderNames = ["build"+repo],
                                                change_filter = filter.ChangeFilter(branch = 'master', project = [repo]),
                                                treeStableTimer = 5*60))

# Incremental build for the simulator and the processor; will fire for every change in the patmos repo at the moment
c['schedulers'].append(SingleBranchScheduler(name = "patmos_change",
                                             builderNames = ["buildpasim","synthpatmos"],
                                             change_filter = filter.ChangeFilter(branch = 'master', project = ['patmos']),
                                             treeStableTimer = 5*60))

# Full build nightly (llvm+clang)
c['schedulers'].append(timed.Nightly(name = 'nightly_llvm',
                                     branch = 'master',
                                     builderNames = ['buildllvm'],
                                     hour = 2,
                                     minute = 0,
                                     onlyIfChanged = False,  # does not work yet
                                     properties = { 'fullBuild' : 'true',
                                                    'cleanInstallDir' : 'true' }))

# Full build nightly (utils)
c['schedulers'].append(timed.Nightly(name = 'nightly_utils',
                                     branch = 'master',
                                     builderNames = ["buildcrt","buildnewlib","buildgold","buildpasim"],
                                     hour = 3,
                                     minute = 0,
                                     properties = { 'fullBuild' : 'true' }))
# Full build nightly (synthesis)
c['schedulers'].append(timed.Nightly(name = 'nightly_synth',
                                     branch = 'master',
                                     builderNames = ['synthpatmos'],
                                     hour = 4,
                                     minute = 0,
                                     properties = { 'fullBuild' : 'true' }))
# Full build nightly (bench)
c['schedulers'].append(timed.Nightly(name = 'nightly_bench',
                                     branch = 'master',
                                     builderNames = ["buildbench"],
                                     hour = 5,
                                     minute = 0,
                                     properties = { 'fullBuild' : 'true' }))


# Manual schedulers for all builders
c['schedulers'].append(ForceScheduler(name = "force", builderNames = mainbuilders.keys()))
c['schedulers'].append(ForceScheduler(name = "force_synth", builderNames = synthbuilders.keys()))
for arch in architectures:
   c['schedulers'].append(ForceScheduler(name = "force_"+arch,
                                         builderNames = [ name + "_" + arch for name in archbuilders.keys() ]))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth = auth.BasicAuth( [ (config.get('auth','username'),config.get('auth','password')) ] ),
    gracefulShutdown  =  False,
    forceBuild  =  'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port = config.getint('ports','master-port'), authz = authz_cfg))

from buildbot.status import words

if config.getboolean('irc',"enabled"):
   c['status'].append(words.IRC(host=config.get('irc', 'host'),
                                nick=config.get('irc', 'nick'),
                                allowForce=True,
                                channels=[config.get('irc','channel')] ))

# Mail notifier for synthesis and hardware tests
from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr=config.get('mail','fromaddr'),
                  relayhost=config.get('mail','relayhost'),
                  sendToInterestedUsers=False,
#                  builders = [...],
                  extraRecipients = [ mail for name, mail in config.items('mailrecipients') ],
                  mode=["failing","change"])

if config.getboolean('mail','enabled'):
   c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = config.get('project','title')
c['titleURL'] = config.get('project','url')

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = config.get('project','buildbot-url')

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
